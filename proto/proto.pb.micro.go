// Code generated by protoc-gen-micro. DO NOT EDIT.
// versions:
// protoc-gen-go v3.10.0
// source: proto.proto

package proto

import (
	fmt "fmt"
	_ "github.com/asynkron/protoactor-go/actor"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro-community/micro/v3/service/api"
	client "github.com/micro-community/micro/v3/service/client"
	server "github.com/micro-community/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RemoteActor service

func NewRemoteActorEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RemoteActor service

type RemoteActorService interface {
	Call(ctx context.Context, in *Ready, opts ...client.CallOption) (*Done, error)
}

type remoteActorService struct {
	c    client.Client
	name string
}

func NewRemoteActorService(name string, c client.Client) RemoteActorService {
	return &remoteActorService{
		c:    c,
		name: name,
	}
}

func (c *remoteActorService) Call(ctx context.Context, in *Ready, opts ...client.CallOption) (*Done, error) {
	req := c.c.NewRequest(c.name, "RemoteActor.Call", in)
	out := new(Done)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RemoteActor service

type RemoteActorHandler interface {
	Call(context.Context, *Ready, *Done) error
}

func RegisterRemoteActorHandler(s server.Server, hdlr RemoteActorHandler, opts ...server.HandlerOption) error {
	type remoteActor interface {
		Call(ctx context.Context, in *Ready, out *Done) error
	}
	type RemoteActor struct {
		remoteActor
	}
	h := &remoteActorHandler{hdlr}
	return s.Handle(s.NewHandler(&RemoteActor{h}, opts...))
}

type remoteActorHandler struct {
	RemoteActorHandler
}

func (h *remoteActorHandler) Call(ctx context.Context, in *Ready, out *Done) error {
	return h.RemoteActorHandler.Call(ctx, in, out)
}
